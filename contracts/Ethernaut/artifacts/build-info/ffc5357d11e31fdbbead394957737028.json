{
	"id": "ffc5357d11e31fdbbead394957737028",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Ethernaut/Fallback.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\";\r\n\r\ncontract Fallback {\r\n\r\n  using SafeMath for uint256;\r\n  mapping(address => uint) public contributions;\r\n  address payable public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    contributions[msg.sender] = 1000 * (1 ether);\r\n  }\r\n\r\n  modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"caller is not the owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n  function contribute() public payable {\r\n    require(msg.value < 0.001 ether);\r\n    contributions[msg.sender] += msg.value;\r\n    if(contributions[msg.sender] > contributions[owner]) {\r\n      owner = msg.sender;\r\n    }\r\n  }\r\n\r\n  function getContribution() public view returns (uint) {\r\n    return contributions[msg.sender];\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  receive() external payable {\r\n    require(msg.value > 0 && contributions[msg.sender] > 0);\r\n    owner = msg.sender;\r\n  }\r\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Ethernaut/Fallback.sol": {
				"Fallback": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "contribute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "contributions",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getContribution",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Ethernaut/Fallback.sol\":176:1122  contract Fallback {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Ethernaut/Fallback.sol\":317:420  constructor() public {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/Ethernaut/Fallback.sol\":353:363  msg.sender */\n  caller\n    /* \"contracts/Ethernaut/Fallback.sol\":345:350  owner */\n  0x01\n  0x00\n    /* \"contracts/Ethernaut/Fallback.sol\":345:363  owner = msg.sender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Ethernaut/Fallback.sol\":398:414  1000 * (1 ether) */\n  0x3635c9adc5dea00000\n    /* \"contracts/Ethernaut/Fallback.sol\":370:383  contributions */\n  0x00\n    /* \"contracts/Ethernaut/Fallback.sol\":370:395  contributions[msg.sender] */\n  dup1\n    /* \"contracts/Ethernaut/Fallback.sol\":384:394  msg.sender */\n  caller\n    /* \"contracts/Ethernaut/Fallback.sol\":370:395  contributions[msg.sender] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/Ethernaut/Fallback.sol\":370:414  contributions[msg.sender] = 1000 * (1 ether) */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Ethernaut/Fallback.sol\":176:1122  contract Fallback {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Ethernaut/Fallback.sol\":176:1122  contract Fallback {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x3ccfd60b\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x42e94c90\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xd7bb99ba\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xf10fdf5c\n      eq\n      tag_7\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/Ethernaut/Fallback.sol\":1053:1054  0 */\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":1041:1050  msg.value */\n      callvalue\n        /* \"contracts/Ethernaut/Fallback.sol\":1041:1054  msg.value > 0 */\n      gt\n        /* \"contracts/Ethernaut/Fallback.sol\":1041:1087  msg.value > 0 && contributions[msg.sender] > 0 */\n      dup1\n      iszero\n      tag_10\n      jumpi\n      pop\n        /* \"contracts/Ethernaut/Fallback.sol\":1086:1087  0 */\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":1058:1071  contributions */\n      dup1\n        /* \"contracts/Ethernaut/Fallback.sol\":1058:1083  contributions[msg.sender] */\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":1072:1082  msg.sender */\n      caller\n        /* \"contracts/Ethernaut/Fallback.sol\":1058:1083  contributions[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Ethernaut/Fallback.sol\":1058:1087  contributions[msg.sender] > 0 */\n      gt\n        /* \"contracts/Ethernaut/Fallback.sol\":1041:1087  msg.value > 0 && contributions[msg.sender] > 0 */\n    tag_10:\n        /* \"contracts/Ethernaut/Fallback.sol\":1033:1088  require(msg.value > 0 && contributions[msg.sender] > 0) */\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_11:\n        /* \"contracts/Ethernaut/Fallback.sol\":1103:1113  msg.sender */\n      caller\n        /* \"contracts/Ethernaut/Fallback.sol\":1095:1100  owner */\n      0x01\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":1095:1113  owner = msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Ethernaut/Fallback.sol\":176:1122  contract Fallback {\r... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Ethernaut/Fallback.sol\":906:993  function withdraw() public onlyOwner {\r... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      pop\n      tag_13\n      tag_14\n      jump\t// in\n    tag_13:\n      stop\n        /* \"contracts/Ethernaut/Fallback.sol\":232:277  mapping(address => uint) public contributions */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      pop\n      tag_16\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_18\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Ethernaut/Fallback.sol\":282:310  address payable public owner */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_19\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      pop\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Ethernaut/Fallback.sol\":574:795  function contribute() public payable {\r... */\n    tag_6:\n      tag_22\n      tag_23\n      jump\t// in\n    tag_22:\n      stop\n        /* \"contracts/Ethernaut/Fallback.sol\":801:900  function getContribution() public view returns (uint) {\r... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      pop\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Ethernaut/Fallback.sol\":906:993  function withdraw() public onlyOwner {\r... */\n    tag_14:\n        /* \"contracts/Ethernaut/Fallback.sol\":492:497  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Fallback.sol\":478:497  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Fallback.sol\":478:488  msg.sender */\n      caller\n        /* \"contracts/Ethernaut/Fallback.sol\":478:497  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/Ethernaut/Fallback.sol\":456:548  require(\r... */\n      tag_28\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x17\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x63616c6c6572206973206e6f7420746865206f776e6572000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_28:\n        /* \"contracts/Ethernaut/Fallback.sol\":950:955  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Fallback.sol\":950:964  owner.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Fallback.sol\":950:987  owner.transfer(address(this).balance) */\n      0x08fc\n        /* \"contracts/Ethernaut/Fallback.sol\":965:986  address(this).balance */\n      selfbalance\n        /* \"contracts/Ethernaut/Fallback.sol\":950:987  owner.transfer(address(this).balance) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_31\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_31:\n      pop\n        /* \"contracts/Ethernaut/Fallback.sol\":906:993  function withdraw() public onlyOwner {\r... */\n      jump\t// out\n        /* \"contracts/Ethernaut/Fallback.sol\":232:277  mapping(address => uint) public contributions */\n    tag_18:\n      mstore(0x20, 0x00)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/Ethernaut/Fallback.sol\":282:310  address payable public owner */\n    tag_21:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Ethernaut/Fallback.sol\":574:795  function contribute() public payable {\r... */\n    tag_23:\n        /* \"contracts/Ethernaut/Fallback.sol\":638:649  0.001 ether */\n      0x038d7ea4c68000\n        /* \"contracts/Ethernaut/Fallback.sol\":626:635  msg.value */\n      callvalue\n        /* \"contracts/Ethernaut/Fallback.sol\":626:649  msg.value < 0.001 ether */\n      lt\n        /* \"contracts/Ethernaut/Fallback.sol\":618:650  require(msg.value < 0.001 ether) */\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n        /* \"contracts/Ethernaut/Fallback.sol\":686:695  msg.value */\n      callvalue\n        /* \"contracts/Ethernaut/Fallback.sol\":657:670  contributions */\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":657:682  contributions[msg.sender] */\n      dup1\n        /* \"contracts/Ethernaut/Fallback.sol\":671:681  msg.sender */\n      caller\n        /* \"contracts/Ethernaut/Fallback.sol\":657:682  contributions[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":657:695  contributions[msg.sender] += msg.value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Ethernaut/Fallback.sol\":733:746  contributions */\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":733:753  contributions[owner] */\n      dup1\n        /* \"contracts/Ethernaut/Fallback.sol\":747:752  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Ethernaut/Fallback.sol\":733:753  contributions[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Ethernaut/Fallback.sol\":705:718  contributions */\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":705:730  contributions[msg.sender] */\n      dup1\n        /* \"contracts/Ethernaut/Fallback.sol\":719:729  msg.sender */\n      caller\n        /* \"contracts/Ethernaut/Fallback.sol\":705:730  contributions[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Ethernaut/Fallback.sol\":705:753  contributions[msg.sender] > contributions[owner] */\n      gt\n        /* \"contracts/Ethernaut/Fallback.sol\":702:790  if(contributions[msg.sender] > contributions[owner]) {\r... */\n      iszero\n      tag_34\n      jumpi\n        /* \"contracts/Ethernaut/Fallback.sol\":772:782  msg.sender */\n      caller\n        /* \"contracts/Ethernaut/Fallback.sol\":764:769  owner */\n      0x01\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":764:782  owner = msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Ethernaut/Fallback.sol\":702:790  if(contributions[msg.sender] > contributions[owner]) {\r... */\n    tag_34:\n        /* \"contracts/Ethernaut/Fallback.sol\":574:795  function contribute() public payable {\r... */\n      jump\t// out\n        /* \"contracts/Ethernaut/Fallback.sol\":801:900  function getContribution() public view returns (uint) {\r... */\n    tag_26:\n        /* \"contracts/Ethernaut/Fallback.sol\":849:853  uint */\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":869:882  contributions */\n      dup1\n        /* \"contracts/Ethernaut/Fallback.sol\":869:894  contributions[msg.sender] */\n      0x00\n        /* \"contracts/Ethernaut/Fallback.sol\":883:893  msg.sender */\n      caller\n        /* \"contracts/Ethernaut/Fallback.sol\":869:894  contributions[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Ethernaut/Fallback.sol\":862:894  return contributions[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/Ethernaut/Fallback.sol\":801:900  function getContribution() public view returns (uint) {\r... */\n      swap1\n      jump\t// out\n\n    auxdata: 0xa264697066735822122022d71294bfc5859914029da2c4e5e8a0ed8ba7f4e832738aa28d0d8fc315e29564736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550683635c9adc5dea000006000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610515806100ad6000396000f3fe60806040526004361061004e5760003560e01c80633ccfd60b146100f257806342e94c90146101095780638da5cb5b1461016e578063d7bb99ba146101af578063f10fdf5c146101b9576100ed565b366100ed576000341180156100a1575060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b6100aa57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550005b600080fd5b3480156100fe57600080fd5b506101076101e4565b005b34801561011557600080fd5b506101586004803603602081101561012c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610312565b6040518082815260200191505060405180910390f35b34801561017a57600080fd5b5061018361032a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101b7610350565b005b3480156101c557600080fd5b506101ce610499565b6040518082815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561030f573d6000803e3d6000fd5b50565b60006020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b66038d7ea4c68000341061036357600080fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156104975733600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509056fea264697066735822122022d71294bfc5859914029da2c4e5e8a0ed8ba7f4e832738aa28d0d8fc315e29564736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH9 0x3635C9ADC5DEA00000 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x515 DUP1 PUSH2 0xAD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x42E94C90 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0xD7BB99BA EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xF10FDF5C EQ PUSH2 0x1B9 JUMPI PUSH2 0xED JUMP JUMPDEST CALLDATASIZE PUSH2 0xED JUMPI PUSH1 0x0 CALLVALUE GT DUP1 ISZERO PUSH2 0xA1 JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT JUMPDEST PUSH2 0xAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x107 PUSH2 0x1E4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x312 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B7 PUSH2 0x350 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CE PUSH2 0x499 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x30F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH7 0x38D7EA4C68000 CALLVALUE LT PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO PUSH2 0x497 JUMPI CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xD7 SLT SWAP5 0xBF 0xC5 DUP6 SWAP10 EQ MUL SWAP14 LOG2 0xC4 0xE5 0xE8 LOG0 0xED DUP12 0xA7 DELEGATECALL 0xE8 ORIGIN PUSH20 0x8AA28D0D8FC315E29564736F6C634300060C0033 ",
							"sourceMap": "176:946:0:-:0;;;317:103;;;;;;;;;;353:10;345:5;;:18;;;;;;;;;;;;;;;;;;398:16;370:13;:25;384:10;370:25;;;;;;;;;;;;;;;:44;;;;176:946;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361061004e5760003560e01c80633ccfd60b146100f257806342e94c90146101095780638da5cb5b1461016e578063d7bb99ba146101af578063f10fdf5c146101b9576100ed565b366100ed576000341180156100a1575060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b6100aa57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550005b600080fd5b3480156100fe57600080fd5b506101076101e4565b005b34801561011557600080fd5b506101586004803603602081101561012c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610312565b6040518082815260200191505060405180910390f35b34801561017a57600080fd5b5061018361032a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101b7610350565b005b3480156101c557600080fd5b506101ce610499565b6040518082815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561030f573d6000803e3d6000fd5b50565b60006020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b66038d7ea4c68000341061036357600080fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156104975733600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509056fea264697066735822122022d71294bfc5859914029da2c4e5e8a0ed8ba7f4e832738aa28d0d8fc315e29564736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x42E94C90 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0xD7BB99BA EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xF10FDF5C EQ PUSH2 0x1B9 JUMPI PUSH2 0xED JUMP JUMPDEST CALLDATASIZE PUSH2 0xED JUMPI PUSH1 0x0 CALLVALUE GT DUP1 ISZERO PUSH2 0xA1 JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT JUMPDEST PUSH2 0xAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x107 PUSH2 0x1E4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x158 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x312 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x32A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B7 PUSH2 0x350 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CE PUSH2 0x499 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x30F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH7 0x38D7EA4C68000 CALLVALUE LT PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO PUSH2 0x497 JUMPI CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xD7 SLT SWAP5 0xBF 0xC5 DUP6 SWAP10 EQ MUL SWAP14 LOG2 0xC4 0xE5 0xE8 LOG0 0xED DUP12 0xA7 DELEGATECALL 0xE8 ORIGIN PUSH20 0x8AA28D0D8FC315E29564736F6C634300060C0033 ",
							"sourceMap": "176:946:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1053:1;1041:9;:13;:46;;;;;1086:1;1058:13;:25;1072:10;1058:25;;;;;;;;;;;;;;;;:29;1041:46;1033:55;;;;;;1103:10;1095:5;;:18;;;;;;;;;;;;;;;;;;176:946;;;;;906:87;;;;;;;;;;;;;:::i;:::-;;232:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;282:28;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;574:221;;;:::i;:::-;;801:99;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;906:87;492:5;;;;;;;;;;;478:19;;:10;:19;;;456:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;950:5:::1;;;;;;;;;;;:14;;:37;965:21;950:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;906:87::o:0;232:45::-;;;;;;;;;;;;;;;;;:::o;282:28::-;;;;;;;;;;;;;:::o;574:221::-;638:11;626:9;:23;618:32;;;;;;686:9;657:13;:25;671:10;657:25;;;;;;;;;;;;;;;;:38;;;;;;;;;;;733:13;:20;747:5;;;;;;;;;;;733:20;;;;;;;;;;;;;;;;705:13;:25;719:10;705:25;;;;;;;;;;;;;;;;:48;702:88;;;772:10;764:5;;:18;;;;;;;;;;;;;;;;;;702:88;574:221::o;801:99::-;849:4;869:13;:25;883:10;869:25;;;;;;;;;;;;;;;;862:32;;801:99;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "260200",
								"executionCost": "41269",
								"totalCost": "301469"
							},
							"external": {
								"contribute()": "44614",
								"contributions(address)": "1169",
								"getContribution()": "1168",
								"owner()": "1069",
								"withdraw()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 176,
									"end": 1122,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 317,
									"end": 420,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 317,
									"end": 420,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 317,
									"end": 420,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 317,
									"end": 420,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 317,
									"end": 420,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 317,
									"end": 420,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 317,
									"end": 420,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 317,
									"end": 420,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 317,
									"end": 420,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 317,
									"end": 420,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 317,
									"end": 420,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 353,
									"end": 363,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 345,
									"end": 350,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 345,
									"end": 350,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 345,
									"end": 363,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 345,
									"end": 363,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 345,
									"end": 363,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 345,
									"end": 363,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 345,
									"end": 363,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 398,
									"end": 414,
									"name": "PUSH",
									"source": 0,
									"value": "3635C9ADC5DEA00000"
								},
								{
									"begin": 370,
									"end": 383,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 370,
									"end": 395,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 384,
									"end": 394,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 370,
									"end": 395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 370,
									"end": 395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 370,
									"end": 395,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 370,
									"end": 395,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 370,
									"end": 395,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 370,
									"end": 395,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 370,
									"end": 414,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 370,
									"end": 414,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 370,
									"end": 414,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 370,
									"end": 414,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 176,
									"end": 1122,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122022d71294bfc5859914029da2c4e5e8a0ed8ba7f4e832738aa28d0d8fc315e29564736f6c634300060c0033",
									".code": [
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "3CCFD60B"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "42E94C90"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "D7BB99BA"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "F10FDF5C"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1053,
											"end": 1054,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1041,
											"end": 1050,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1041,
											"end": 1054,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1041,
											"end": 1087,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1041,
											"end": 1087,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1041,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1041,
											"end": 1087,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1041,
											"end": 1087,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1086,
											"end": 1087,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1058,
											"end": 1071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1072,
											"end": 1082,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1083,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1087,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1041,
											"end": 1087,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1041,
											"end": 1087,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1033,
											"end": 1088,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1033,
											"end": 1088,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1033,
											"end": 1088,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1088,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1033,
											"end": 1088,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1033,
											"end": 1088,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1033,
											"end": 1088,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1113,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1100,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1095,
											"end": 1100,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 176,
											"end": 1122,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 574,
											"end": 795,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 574,
											"end": 795,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 574,
											"end": 795,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 574,
											"end": 795,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 574,
											"end": 795,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 574,
											"end": 795,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 574,
											"end": 795,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 574,
											"end": 795,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 906,
											"end": 993,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 492,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 492,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 492,
											"end": 497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 492,
											"end": 497,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 492,
											"end": 497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 492,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 492,
											"end": 497,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 492,
											"end": 497,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 492,
											"end": 497,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 492,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 492,
											"end": 497,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 478,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 478,
											"end": 497,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 478,
											"end": 488,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 478,
											"end": 497,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 478,
											"end": 497,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 478,
											"end": 497,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "63616C6C6572206973206E6F7420746865206F776E6572000000000000000000"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 456,
											"end": 548,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 456,
											"end": 548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 950,
											"end": 955,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 950,
											"end": 955,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 950,
											"end": 955,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 950,
											"end": 955,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 950,
											"end": 955,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 950,
											"end": 955,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 950,
											"end": 955,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 950,
											"end": 955,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 950,
											"end": 955,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 950,
											"end": 955,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 950,
											"end": 955,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 950,
											"end": 964,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 950,
											"end": 964,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "PUSH",
											"source": 0,
											"value": "8FC"
										},
										{
											"begin": 965,
											"end": 986,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 950,
											"end": 987,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 950,
											"end": 987,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 950,
											"end": 987,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 950,
											"end": 987,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 950,
											"end": 987,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 950,
											"end": 987,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 950,
											"end": 987,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 950,
											"end": 987,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 906,
											"end": 993,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 232,
											"end": 277,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 282,
											"end": 310,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 282,
											"end": 310,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 574,
											"end": 795,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 574,
											"end": 795,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 638,
											"end": 649,
											"name": "PUSH",
											"source": 0,
											"value": "38D7EA4C68000"
										},
										{
											"begin": 626,
											"end": 635,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 626,
											"end": 649,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 618,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 618,
											"end": 650,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 618,
											"end": 650,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 618,
											"end": 650,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 618,
											"end": 650,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 618,
											"end": 650,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 618,
											"end": 650,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 686,
											"end": 695,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 657,
											"end": 670,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 657,
											"end": 682,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 671,
											"end": 681,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 657,
											"end": 682,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 657,
											"end": 682,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 657,
											"end": 682,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 657,
											"end": 682,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 657,
											"end": 682,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 657,
											"end": 682,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 657,
											"end": 695,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 657,
											"end": 695,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 733,
											"end": 746,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 733,
											"end": 753,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 747,
											"end": 752,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 747,
											"end": 752,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 747,
											"end": 752,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 747,
											"end": 752,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 747,
											"end": 752,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 747,
											"end": 752,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 747,
											"end": 752,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 747,
											"end": 752,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 747,
											"end": 752,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 747,
											"end": 752,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 747,
											"end": 752,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 733,
											"end": 753,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 733,
											"end": 753,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 733,
											"end": 753,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 733,
											"end": 753,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 733,
											"end": 753,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 733,
											"end": 753,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 705,
											"end": 718,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 705,
											"end": 730,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 705,
											"end": 730,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 705,
											"end": 730,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 705,
											"end": 730,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 705,
											"end": 730,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 705,
											"end": 730,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 705,
											"end": 730,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 705,
											"end": 753,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 702,
											"end": 790,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 702,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 702,
											"end": 790,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 772,
											"end": 782,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 764,
											"end": 769,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 764,
											"end": 769,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 764,
											"end": 782,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 764,
											"end": 782,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 764,
											"end": 782,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 764,
											"end": 782,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 702,
											"end": 790,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 702,
											"end": 790,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 574,
											"end": 795,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 801,
											"end": 900,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 849,
											"end": 853,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 869,
											"end": 882,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 883,
											"end": 893,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 869,
											"end": 894,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 869,
											"end": 894,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 869,
											"end": 894,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 869,
											"end": 894,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 869,
											"end": 894,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 869,
											"end": 894,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 862,
											"end": 894,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 862,
											"end": 894,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 801,
											"end": 900,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"contribute()": "d7bb99ba",
							"contributions(address)": "42e94c90",
							"getContribution()": "f10fdf5c",
							"owner()": "8da5cb5b",
							"withdraw()": "3ccfd60b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ethernaut/Fallback.sol\":\"Fallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ethernaut/Fallback.sol\":{\"keccak256\":\"0xbb4b6a3da762484597399d113f6328bfaffef4a061149b07a19059bd57953271\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9683f2247421a28da82fef7e66f2f80f622053683de7b5fc856dd122b352540\",\"dweb:/ipfs/Qmbr5B6fm2GcV5nTNro5iQFAkbUsEeCBdKXYxSxcx2JxFu\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 9,
								"contract": "contracts/Ethernaut/Fallback.sol:Fallback",
								"label": "contributions",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 11,
								"contract": "contracts/Ethernaut/Fallback.sol:Fallback",
								"label": "owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address_payable"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":622:5200  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":622:5200  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e64891e8457a5724628a9071ecd15aac5fa08960b7c95501be23a765fd88bd4e64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e64891e8457a5724628a9071ecd15aac5fa08960b7c95501be23a765fd88bd4e64736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0x48 SWAP2 0xE8 GASLIMIT PUSH27 0x5724628A9071ECD15AAC5FA08960B7C95501BE23A765FD88BD4E64 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
							"sourceMap": "622:4578:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e64891e8457a5724628a9071ecd15aac5fa08960b7c95501be23a765fd88bd4e64736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0x48 SWAP2 0xE8 GASLIMIT PUSH27 0x5724628A9071ECD15AAC5FA08960B7C95501BE23A765FD88BD4E64 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
							"sourceMap": "622:4578:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5200,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e64891e8457a5724628a9071ecd15aac5fa08960b7c95501be23a765fd88bd4e64736f6c634300060c0033",
									".code": [
										{
											"begin": 622,
											"end": 5200,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5200,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/Ethernaut/Fallback.sol": {
				"ast": {
					"absolutePath": "contracts/Ethernaut/Fallback.sol",
					"exportedSymbols": {
						"Fallback": [
							127
						]
					},
					"id": 128,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 128,
							"sourceUnit": 324,
							"src": "60:112:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 127,
							"linearizedBaseContracts": [
								127
							],
							"name": "Fallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 5,
									"libraryName": {
										"contractScope": null,
										"id": 3,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 323,
										"src": "207:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$323",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "201:27:0",
									"typeName": {
										"id": 4,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "220:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "42e94c90",
									"id": 9,
									"mutability": "mutable",
									"name": "contributions",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 127,
									"src": "232:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 8,
										"keyType": {
											"id": 6,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "240:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "232:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 7,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "251:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 11,
									"mutability": "mutable",
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 127,
									"src": "282:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 10,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "282:15:0",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 29,
										"nodeType": "Block",
										"src": "338:82:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 17,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 14,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "345:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 15,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "353:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "353:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "345:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 18,
												"nodeType": "ExpressionStatement",
												"src": "345:18:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 19,
															"name": "contributions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "370:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 22,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 20,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "384:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 21,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "384:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "370:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_rational_1000000000000000000000_by_1",
															"typeString": "int_const 1000000000000000000000"
														},
														"id": 26,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"hexValue": "31303030",
															"id": 23,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "398:4:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															},
															"value": "1000"
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"hexValue": "31",
																	"id": 24,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "406:7:0",
																	"subdenomination": "ether",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1"
																}
															],
															"id": 25,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "405:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000"
															}
														},
														"src": "398:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000000000000000_by_1",
															"typeString": "int_const 1000000000000000000000"
														}
													},
													"src": "370:44:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "370:44:0"
											}
										]
									},
									"documentation": null,
									"id": 30,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "328:2:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "338:0:0"
									},
									"scope": 127,
									"src": "317:103:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 41,
										"nodeType": "Block",
										"src": "445:123:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															"id": 36,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 33,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "478:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 34,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "478:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 35,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "492:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "478:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "63616c6c6572206973206e6f7420746865206f776e6572",
															"id": 37,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "512:25:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															},
															"value": "caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															}
														],
														"id": 32,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "456:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "456:92:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 39,
												"nodeType": "ExpressionStatement",
												"src": "456:92:0"
											},
											{
												"id": 40,
												"nodeType": "PlaceholderStatement",
												"src": "559:1:0"
											}
										]
									},
									"documentation": null,
									"id": 42,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "445:0:0"
									},
									"src": "426:142:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "611:184:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 46,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "626:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 47,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "626:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "302e303031",
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "638:11:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000_by_1",
																	"typeString": "int_const 1000000000000000"
																},
																"value": "0.001"
															},
															"src": "626:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 45,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "618:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "618:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 51,
												"nodeType": "ExpressionStatement",
												"src": "618:32:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 52,
															"name": "contributions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "657:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 55,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 53,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "671:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "671:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "657:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 56,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "686:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 57,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "686:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "657:38:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 59,
												"nodeType": "ExpressionStatement",
												"src": "657:38:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 67,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 60,
															"name": "contributions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "705:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 63,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 61,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "719:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 62,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "719:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "705:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 64,
															"name": "contributions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "733:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 66,
														"indexExpression": {
															"argumentTypes": null,
															"id": 65,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "747:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "733:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "705:48:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 74,
												"nodeType": "IfStatement",
												"src": "702:88:0",
												"trueBody": {
													"id": 73,
													"nodeType": "Block",
													"src": "755:35:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 68,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 11,
																	"src": "764:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 69,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "772:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 70,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "772:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "764:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 72,
															"nodeType": "ExpressionStatement",
															"src": "764:18:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"functionSelector": "d7bb99ba",
									"id": 76,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "contribute",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "593:2:0"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "611:0:0"
									},
									"scope": 127,
									"src": "574:221:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 86,
										"nodeType": "Block",
										"src": "855:45:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 81,
														"name": "contributions",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "869:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 84,
													"indexExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 82,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "883:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 83,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "883:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "869:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 80,
												"id": 85,
												"nodeType": "Return",
												"src": "862:32:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "f10fdf5c",
									"id": 87,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getContribution",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "825:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 87,
												"src": "849:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "849:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "848:6:0"
									},
									"scope": 127,
									"src": "801:99:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "943:50:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 97,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -28,
																		"src": "973:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Fallback_$127",
																			"typeString": "contract Fallback"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Fallback_$127",
																			"typeString": "contract Fallback"
																		}
																	],
																	"id": 96,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "965:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 95,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "965:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 98,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "965:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 99,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "965:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 92,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "950:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 94,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "950:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "950:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "ExpressionStatement",
												"src": "950:37:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "3ccfd60b",
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 90,
											"modifierName": {
												"argumentTypes": null,
												"id": 89,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 42,
												"src": "933:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "933:9:0"
										}
									],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "943:0:0"
									},
									"scope": 127,
									"src": "906:87:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "1026:93:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 110,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 107,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "1041:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 108,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "1041:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 109,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1053:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1041:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 116,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 111,
																		"name": "contributions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 9,
																		"src": "1058:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 114,
																	"indexExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 112,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -15,
																			"src": "1072:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 113,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "1072:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1058:25:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 115,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1086:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1058:29:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1041:46:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 106,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1033:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1033:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "1033:55:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 120,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "1095:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 121,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "1103:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 122,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "1103:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1095:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "1095:18:0"
											}
										]
									},
									"documentation": null,
									"id": 126,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1026:0:0"
									},
									"scope": 127,
									"src": "999:120:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 128,
							"src": "176:946:0"
						}
					],
					"src": "33:1089:0"
				},
				"id": 0
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							323
						]
					},
					"id": 324,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 129,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 130,
								"nodeType": "StructuredDocumentation",
								"src": "58:563:1",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 323,
							"linearizedBaseContracts": [
								323
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 155,
										"nodeType": "Block",
										"src": "941:109:1",
										"statements": [
											{
												"assignments": [
													141
												],
												"declarations": [
													{
														"constant": false,
														"id": 141,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 155,
														"src": "951:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 140,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "951:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 145,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 142,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "963:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 143,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 135,
														"src": "967:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "963:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "951:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 147,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "986:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 148,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "991:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "986:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "994:29:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 146,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "978:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "978:46:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 152,
												"nodeType": "ExpressionStatement",
												"src": "978:46:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 153,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 141,
													"src": "1042:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 139,
												"id": 154,
												"nodeType": "Return",
												"src": "1035:8:1"
											}
										]
									},
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "645:224:1",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "887:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "887:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "898:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "898:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "886:22:1"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "932:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "931:9:1"
									},
									"scope": 323,
									"src": "874:176:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 172,
										"nodeType": "Block",
										"src": "1388:67:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 167,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 159,
															"src": "1409:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 168,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 161,
															"src": "1412:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1415:32:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 166,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															173,
															201
														],
														"referencedDeclaration": 201,
														"src": "1405:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1405:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 165,
												"id": 171,
												"nodeType": "Return",
												"src": "1398:50:1"
											}
										]
									},
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "1056:260:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 173,
												"src": "1334:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1334:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 173,
												"src": "1345:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1345:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1333:22:1"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 173,
												"src": "1379:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1379:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1378:9:1"
									},
									"scope": 323,
									"src": "1321:134:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 200,
										"nodeType": "Block",
										"src": "1841:92:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 188,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 186,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "1859:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 187,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 176,
																"src": "1864:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1859:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 189,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "1867:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 185,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1851:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1851:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 191,
												"nodeType": "ExpressionStatement",
												"src": "1851:29:1"
											},
											{
												"assignments": [
													193
												],
												"declarations": [
													{
														"constant": false,
														"id": 193,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 200,
														"src": "1890:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 192,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1890:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 197,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 194,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 176,
														"src": "1902:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 195,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 178,
														"src": "1906:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1902:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1890:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 198,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 193,
													"src": "1925:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 184,
												"id": 199,
												"nodeType": "Return",
												"src": "1918:8:1"
											}
										]
									},
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "1461:280:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 201,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 201,
												"src": "1759:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1759:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 201,
												"src": "1770:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1770:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 201,
												"src": "1781:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 179,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1781:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1758:50:1"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 201,
												"src": "1832:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1832:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1831:9:1"
									},
									"scope": 323,
									"src": "1746:187:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "2247:392:1",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 211,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 204,
														"src": "2479:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 212,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2484:1:1",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2479:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 217,
												"nodeType": "IfStatement",
												"src": "2475:45:1",
												"trueBody": {
													"id": 216,
													"nodeType": "Block",
													"src": "2487:33:1",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 214,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2508:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 210,
															"id": 215,
															"nodeType": "Return",
															"src": "2501:8:1"
														}
													]
												}
											},
											{
												"assignments": [
													219
												],
												"declarations": [
													{
														"constant": false,
														"id": 219,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 235,
														"src": "2530:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 218,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2530:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 223,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 220,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 204,
														"src": "2542:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 221,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 206,
														"src": "2546:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2542:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2530:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 227,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 225,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 219,
																	"src": "2565:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 226,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 204,
																	"src": "2569:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2565:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 228,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 206,
																"src": "2574:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2565:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 230,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2577:35:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 224,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2557:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2557:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 232,
												"nodeType": "ExpressionStatement",
												"src": "2557:56:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 233,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 219,
													"src": "2631:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 210,
												"id": 234,
												"nodeType": "Return",
												"src": "2624:8:1"
											}
										]
									},
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "1939:236:1",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "2193:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2193:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "2204:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2204:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2192:22:1"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "2238:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 208,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2238:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2237:9:1"
									},
									"scope": 323,
									"src": "2180:459:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "3168:63:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 247,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "3189:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 248,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 241,
															"src": "3192:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3195:28:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 246,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															253,
															281
														],
														"referencedDeclaration": 281,
														"src": "3185:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3185:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 245,
												"id": 251,
												"nodeType": "Return",
												"src": "3178:46:1"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "2645:451:1",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 253,
												"src": "3114:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3114:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 253,
												"src": "3125:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3125:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3113:22:1"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 253,
												"src": "3159:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3159:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3158:9:1"
									},
									"scope": 323,
									"src": "3101:130:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 280,
										"nodeType": "Block",
										"src": "3808:177:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 266,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 258,
																"src": "3826:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3830:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3826:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 269,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 260,
															"src": "3833:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 265,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3818:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3818:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 271,
												"nodeType": "ExpressionStatement",
												"src": "3818:28:1"
											},
											{
												"assignments": [
													273
												],
												"declarations": [
													{
														"constant": false,
														"id": 273,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 280,
														"src": "3856:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 272,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3856:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 277,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 274,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "3868:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 275,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 258,
														"src": "3872:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3868:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3856:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 278,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 273,
													"src": "3977:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 264,
												"id": 279,
												"nodeType": "Return",
												"src": "3970:8:1"
											}
										]
									},
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "3237:471:1",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "3726:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3726:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "3737:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3737:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "3748:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 259,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3748:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3725:50:1"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "3799:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3799:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3798:9:1"
									},
									"scope": 323,
									"src": "3713:272:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 297,
										"nodeType": "Block",
										"src": "4503:61:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 292,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 284,
															"src": "4524:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 293,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "4527:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 294,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4530:26:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 291,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															298,
															322
														],
														"referencedDeclaration": 322,
														"src": "4520:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4520:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 290,
												"id": 296,
												"nodeType": "Return",
												"src": "4513:44:1"
											}
										]
									},
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "3991:440:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 298,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 298,
												"src": "4449:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4449:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 298,
												"src": "4460:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4460:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4448:22:1"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 298,
												"src": "4494:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4494:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4493:9:1"
									},
									"scope": 323,
									"src": "4436:128:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 321,
										"nodeType": "Block",
										"src": "5130:68:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 313,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 311,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 303,
																"src": "5148:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 312,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5153:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5148:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 314,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "5156:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 310,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5140:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 315,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5140:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 316,
												"nodeType": "ExpressionStatement",
												"src": "5140:29:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 317,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "5186:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 318,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 303,
														"src": "5190:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5186:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 309,
												"id": 320,
												"nodeType": "Return",
												"src": "5179:12:1"
											}
										]
									},
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "4570:460:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 322,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 322,
												"src": "5048:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5048:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 322,
												"src": "5059:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5059:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 322,
												"src": "5070:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 304,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5070:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5047:50:1"
									},
									"returnParameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 322,
												"src": "5121:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5121:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5120:9:1"
									},
									"scope": 323,
									"src": "5035:163:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 324,
							"src": "622:4578:1"
						}
					],
					"src": "33:5168:1"
				},
				"id": 1
			}
		}
	}
}